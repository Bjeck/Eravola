using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System.Text;
using System.Text.RegularExpressions;
using System.IO;

[CustomEditor(typeof(Flags))]
public class FlagsEditor : Editor
{
    Flags f;
    SerializedObject GetTarget;
    SerializedProperty flags;

    int listSize;

    private void OnEnable()
    {
        f = (Flags)target;
        GetTarget = new SerializedObject(f);
        flags = GetTarget.FindProperty("flags");
    }


    public override void OnInspectorGUI()
    {
        GetTarget.Update();

        listSize = flags.arraySize;


        //match size
        if (listSize != flags.arraySize)
        {
            while (listSize > flags.arraySize)
            {
                flags.InsertArrayElementAtIndex(flags.arraySize);
            }
            while (listSize < flags.arraySize)
            {
                flags.DeleteArrayElementAtIndex(flags.arraySize - 1);
            }
        }


        EditorGUILayout.BeginHorizontal();
        listSize = EditorGUILayout.IntField("Flags Size", listSize);
        EditorGUILayout.EndHorizontal();

        Show(flags);

        EditorGUILayout.Space();
        EditorGUILayout.Space();

        if (GUILayout.Button("Add New"))
        {
            f.flags.Add(new Flag());
        }

        EditorGUILayout.Space();

        if (GUILayout.Button("Save To Names"))
        {
            CreateFlagConstants();
        }

        GetTarget.ApplyModifiedProperties();
    }


    public static void Show(SerializedProperty list)
    {
        EditorGUILayout.PropertyField(list);
        EditorGUI.indentLevel += 1;
        EditorGUIUtility.labelWidth = 60;
        if (list.isExpanded)
        {
            //EditorGUILayout.PropertyField(list.FindPropertyRelative("Array.size"));
            for (int i = 0; i < list.arraySize; i++)
            {

                SerializedProperty MyListRef = list.GetArrayElementAtIndex(i);
                SerializedProperty name = MyListRef.FindPropertyRelative("Name");
                SerializedProperty value = MyListRef.FindPropertyRelative("Value");

                //SerializedProperty MyArray = MyListRef.FindPropertyRelative("AnIntArray");

                EditorGUILayout.BeginHorizontal("BOX");
                EditorGUILayout.PropertyField(name);
                EditorGUILayout.PropertyField(value);

                if (GUILayout.Button("X"))
                {
                    list.DeleteArrayElementAtIndex(i);
                }

                EditorGUILayout.EndHorizontal();
            }
        }
        EditorGUI.indentLevel -= 1;
    }

    private void CreateFlagConstants()
    {
        Flags flags = target as Flags;
        string scriptPath = Application.dataPath + "/Scripts/Story/FlagNames.cs";

        StringBuilder scriptBuilder = new StringBuilder("public class FlagNames\n{\n\t//Autogenerated by FlagsEditor.cs. Do not change by hand. Nix pille!\n");

        scriptBuilder.Append("\tpublic class Flags\n\t{\n");
        foreach (Flag flag in flags.flags)
        {
            if (string.IsNullOrEmpty(flag.Name))
            {
                continue;
            }
            Regex regex = new Regex("[^a-zA-Z0-9]");
            scriptBuilder.Append("\t\tpublic const string ");
            scriptBuilder.Append(regex.Replace(flag.Name, ""));
            scriptBuilder.Append(" = \"");
            scriptBuilder.Append(flag.Name);
            scriptBuilder.Append("\";\n");
        }

        scriptBuilder.Append("\t}\n}\n");

        File.WriteAllText(scriptPath, scriptBuilder.ToString());
    }


}
